import { useEffect, useContext } from 'react'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'
import useLocalStorage from 'hooks/useLocalStorage'

const CurrentUserChecker = ({children}) => {
    const [{response}, doFetch] = useFetch('/user') 
    const [, setCurrentUserState] = useContext(CurrentUserContext)
    const [token] = useLocalStorage('token')
 
    useEffect(() => {
        if (!token) {
            setCurrentUserState(state => ({
                ...state,
                isLoggedIn: false
            }))
            return
        }
        doFetch()
        
    }, [token, setCurrentUserState, doFetch])//реакт создает все кастомные хуки, которые мы пишем каждый раз внутри реакт.компонент, 
                                    //то есть создает заново doFetch при каждом ререндере
                                    //поэтому самы функцию doFetch мы оборачиваем в useCallback
                                    //сеттеры из useState другая история. реакт умеет их кэшировать и обрабатывать
                                    

    useEffect(() => {
        if(!response) return

        setCurrentUserState(state => ({
            ...state,
            isLoggedIn: true,
            isLoading: false,
            currentUser: response.user
        }))

    },[response, setCurrentUserState])

    return  children
}

export default CurrentUserChecker
